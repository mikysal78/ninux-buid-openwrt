name: Build OpenWRT Ninux
on:
  workflow_dispatch

jobs:
  X86:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile X86_64
      run: |
        ./build.sh X86_64

    - name: Upload firmware X86_64 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: X86_64-squashfs
        path: openwrt/bin/targets/x86/64/openwrt-x86-64-generic-ext4-combined-efi.img.gz

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        file: openwrt/bin/targets/x86/64/openwrt-x86-64-generic-ext4-combined-efi.img.gz
        asset_name: "Firmware Ninux $tag"
        tag: ${{ github.ref }}
        overwrite: true
        body: "Firmware compilati per Ninux NNXX"

  glinet_gl-mt300n-v2:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile glinet_gl-mt300n-v2
      run: |
        ./build.sh glinet_gl-mt300n-v2

    - name: Upload firmware glinet_gl-mt300n-v2 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: glinet_gl-mt300n-v2-squashfs-sysupgrade.bin
        path: openwrt/bin/targets/ramips/mt76x8/openwrt-ramips-mt76x8-glinet_gl-mt300n-v2-squashfs-sysupgrade.bin

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        file: openwrt/bin/targets/ramips/mt76x8/openwrt-ramips-mt76x8-glinet_gl-mt300n-v2-squashfs-sysupgrade.bin
        asset_name: "glinet_gl-mt300n-v2-squashfs-sysupgrade.bin"
        tag: ${{ github.ref }}
        overwrite: true
        body: "Firmware compilati per Ninux NNXX"

  

  lamobo_r1:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile Lamobo_R1
      run: |
        ./build.sh lamobo_R1

    - name: Upload firmware lamobo_R1 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: lamobo_R1-squashfs
        path: openwrt/bin/targets/sunxi/cortexa7/openwrt-sunxi-cortexa7-lamobo_lamobo-r1-ext4-sdcard.img.gz

  linksys:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile linksys_wrt3200acm
      run: |
        ./build.sh linksys_wrt3200acm

    - name: Upload firmware linksys_wrt3200acm to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: linksys_wrt3200acm-squashfs
        path: openwrt/bin/targets/mvebu/cortexa9/openwrt-mvebu-cortexa9-linksys_wrt3200acm-squashfs-sysupgrade.bin

  raspberry:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile Raspberry 3
      run: |
        ./build.sh raspi_3

    - name: Upload firmware raspi_3 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: raspi_3-squashfs
        path: openwrt/bin/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-squashfs-sysupgrade.img.gz

    - name: Compile Raspberry 4
      run: |
        ./build.sh raspi_4

    - name: Upload firmware raspi_4 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: raspi_4-squashfs
        path: openwrt/bin/targets/bcm27xx/bcm2711/openwrt-bcm27xx-bcm2711-rpi-4-squashfs-sysupgrade.img.gz

  totolink:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile Totolink X5000R
      run: |
        ./build.sh totolink_X5000R

    - name: Upload firmware totolink_X5000R to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: totolink_X5000R-squashfs
        path: openwrt/bin/targets/ramips/mt7621/openwrt-ramips-mt7621-totolink_x5000r-squashfs-sysupgrade.bin

  tplinkc2600:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo apt update
        sudo apt -y install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget

    - name: Compile TP-Link C2600
      run: |
        ./build.sh tplink_c2600
        
    - name: Upload firmware tplink_c2600 to workflow directory
      uses: actions/upload-artifact@main
      with:
        name: tplink_c2600-squashfs
        path: openwrt/bin/targets/ipq806x/generic/openwrt-ipq806x-generic-tplink_c2600-squashfs-sysupgrade.bin
