name: Build NNXX
on:
  workflow_dispatch:
    tags:
      - 'v*.*.*'
jobs:
#  Test:
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@main
#      - name: Set env
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Test
#        run: |
#          echo $RELEASE_VERSION
#          echo ${{ env.RELEASE_VERSION }}
          
## GL-Inet GL-MT300n-v2
  glinet_gl-mt300n-v2:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile glinet_gl-mt300n-v2
        run: |
          ./build.sh glinet_gl-mt300n-v2

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/ramips/mt76x8/openwrt-ramips-mt76x8-glinet_gl-mt300n-v2-squashfs-sysupgrade.bin"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## x86
  x86:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile X86_64
        run: |
          ./build.sh X86_64

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/x86/64/openwrt-x86-64-generic-ext4-combined-efi.img.gz"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## Lamobo R1
  Lamobo_R1:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile Lamobo R1
        run: |
          ./build.sh lamobo_R1

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/sunxi/cortexa7/openwrt-sunxi-cortexa7-lamobo_lamobo-r1-ext4-sdcard.img.gz"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## Linksys WRT3200 ACM
  Linksys_WRT3200acm:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile Linksys WRT3200 ACM
        run: |
          ./build.sh linksys_wrt3200acm

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/mvebu/cortexa9/openwrt-mvebu-cortexa9-linksys_wrt3200acm-squashfs-sysupgrade.bin"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## Raspy 3 e 4
  Raspberry:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile Raspberry
        run: |
          ./build.sh raspi_3
          ./build.sh raspi_4

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            - "openwrt/bin/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-squashfs-sysupgrade.img.gz"
            - "openwrt/bin/targets/bcm27xx/bcm2711/openwrt-bcm27xx-bcm2711-rpi-4-squashfs-sysupgrade.img.gz"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## Totolink X5000R
  Totolink_X5000R:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile Totolink_X5000R
        run: |
          ./build.sh totolink_X5000R

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/ramips/mt7621/openwrt-ramips-mt7621-totolink_x5000r-squashfs-sysupgrade.bin"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}

## Tplink C2600
  TP-Link_C2600:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@main
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Initialization environment
        run: |
          sudo apt update
          sudo apt -y install build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
          python3-distutils rsync unzip zlib1g-dev file wget

      - name: Compile TP-Link C2600
        run: |
          ./build.sh tplink_c2600

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "openwrt/bin/targets/ipq806x/generic/openwrt-ipq806x-generic-tplink_c2600-squashfs-sysupgrade.bin"
          replacesArtifacts: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: ${{ env.RELEASE_VERSION }}
